# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PointPercentiles
                                 A QGIS plugin
 This plugin calculates and styles percentile classifications for a point dataset.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-05-28
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Jeff Hamilton
        email                : jeffh@bmcminerals.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon, QColor
from PyQt5.QtWidgets import QAction
import numpy as np
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .point_percentiles_dialog import PointPercentilesDialog
import os.path


class PointPercentiles:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PointPercentiles_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Point Percentiles')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PointPercentiles', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/point_percentiles/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Calculate Percentiles'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Point Percentiles'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PointPercentilesDialog()

        # filter mMapLayerComboBox for point layers
        self.dlg.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)

        # filter mFieldComboBox for numeric fields
        self.dlg.mFieldComboBox.setFilters(QgsFieldProxyModel.Numeric)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            layer = self.dlg.mMapLayerComboBox.currentLayer() # Get selected mMapLayerComboBox value
            elem =  self.dlg.mFieldComboBox.currentField() # Get selected mFieldComboBox value

            elemid = layer.fields().indexFromName(elem)
            unique_values = layer.dataProvider().uniqueValues(elemid)

            a = []
            for value in unique_values:
                a.append(value)

            pct25 = np.percentile(a,25) # gives the 25th percentile
            pct50 = np.percentile(a,50) # gives the 50th percentile
            pct75 = np.percentile(a,75) # gives the 75th percentile
            pct90 = np.percentile(a,90) # gives the 90th percentile
            pct95 = np.percentile(a,95) # gives the 95th percentile
            pct98 = np.percentile(a,98) # gives the 98th percentile

            classes = (
                    ('25th %ile (<'+str(pct25)+')', -999999, pct25, 'black'),
                    ('50th %ile ('+str(pct25)+' - '+str(pct50)+')', pct25, pct50, 'blue'),
                    ('75th %ile ('+str(pct50)+' - '+str(pct75)+')', pct50, pct75, 'green'),
                    ('90th %ile ('+str(pct75)+' - '+str(pct90)+')', pct75, pct90, 'yellow'),
                    ('95th %ile ('+str(pct90)+' - '+str(pct95)+')', pct90, pct95, 'Orange'),
                    ('98th %ile ('+str(pct95)+' - '+str(pct98)+')', pct95, pct98, 'Red')
                    )
            ranges = []

            for label, lower, upper, color in classes:
                
                # get default symbol for geometry type
                symbol = QgsSymbol.defaultSymbol(layer.geometryType())
                
                # set symbol properties
                symbol.setColor(QColor(color))
                
                # create category with these properties
                range = QgsRendererRange(lower, upper, symbol, label)
                ranges.append(range)
                
            renderer = QgsGraduatedSymbolRenderer(elem, ranges)
            layer.setRenderer(renderer)

            # set the symbol sizes
            renderer = layer.renderer()

            # set 25th %ile
            # get the current symbol
            range = renderer.ranges()[0]
            current_symbol = range.symbol()
            # make a new copy of it
            new_symbol = current_symbol.clone()
            # edit the symbol properties
            new_symbol.setSize(0.5)
            # save it back to the graduated class
            renderer.updateRangeSymbol(0, new_symbol)

            # set 50th percentile
            # get the current symbol
            range = renderer.ranges()[1]
            current_symbol = range.symbol()
            # make a new copy of it
            new_symbol = current_symbol.clone()
            # edit the symbol properties
            new_symbol.setSize(1)
            # save it back to the graduated class
            renderer.updateRangeSymbol(1, new_symbol)

            layer.triggerRepaint()
